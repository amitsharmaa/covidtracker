{"version":3,"sources":["components/Covid.js","reportWebVitals.js","index.js"],"names":["Covid","useState","data","setData","getCovidData","a","fetch","res","json","actualData","statewise","console","log","useEffect","className","recovered","confirmed","deaths","active","lastupdatedtime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPA2FeA,EAvFD,WAEV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAY,uCAAG,8BAAAC,EAAA,+EAEKC,MAAM,0CAFX,cAEPC,EAFO,gBAGYA,EAAIC,OAHhB,OAGPC,EAHO,OAIbN,EAAQM,EAAWC,UAAU,IAJhB,kDAMbC,QAAQC,IAAR,MANa,0DAAH,qDAiBlB,OALAC,qBAAU,WACNT,MACD,IAIC,mCACA,oCACI,kDACA,kDAEA,+BACI,oBAAIU,UAAU,OAAd,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAGA,UAAU,YAAb,UAAyB,yCAAzB,cACA,mBAAGA,UAAU,wBAAb,0BAKZ,oBAAIA,UAAU,OAAd,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAGA,UAAU,YAAb,UAAyB,2CAAzB,iBACA,mBAAGA,UAAU,wBAAb,SAAsCZ,EAAKa,mBAKvD,oBAAID,UAAU,OAAd,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAGA,UAAU,YAAb,UAAyB,2CAAzB,iBACA,mBAAGA,UAAU,wBAAb,SAAsCZ,EAAKc,mBAKvD,oBAAIF,UAAU,OAAd,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAGA,UAAU,YAAb,UAAyB,2CAAzB,aACA,mBAAGA,UAAU,wBAAb,SAAsCZ,EAAKe,gBAKvD,oBAAIH,UAAU,OAAd,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAGA,UAAU,YAAb,UAAyB,2CAAzB,cACA,mBAAGA,UAAU,wBAAb,SAAsCZ,EAAKgB,gBAKvD,oBAAIJ,UAAU,OAAd,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAGA,UAAU,YAAb,UAAyB,0CAAzB,eACA,mBAAGA,UAAU,wBAAb,SAAsCZ,EAAKiB,kCCrExDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5445bcbb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Covid.css'\r\n\r\n\r\nconst Covid = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    const getCovidData = async () => {\r\n        try {\r\n            const res = await fetch('https://api.covid19india.org/data.json');\r\n            const actualData = await res.json();\r\n            setData(actualData.statewise[0]);\r\n        } catch (error) {\r\n            console.log(error);    \r\n        }\r\n    }\r\n\r\n\r\n    //at the time of page loading it will run, means fetching the api initially\r\n    useEffect(() => {\r\n        getCovidData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n        <section>\r\n            <h1>&#128308;LIVE</h1>\r\n            <h2>COVID-19 TRACKER</h2>\r\n\r\n            <ul>\r\n                <li className=\"card\">\r\n                    <div className=\"card-main\">\r\n                        <div className=\"card-inner\">\r\n                            <p className=\"card-name\"><span> OUR </span> COUNTRY</p>\r\n                            <p className=\"card-total card-small\">INDIA</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"card\">\r\n                    <div className=\"card-main\">\r\n                        <div className=\"card-inner\">\r\n                            <p className=\"card-name\"><span> TOTAL </span> RECOVERED </p>\r\n                            <p className=\"card-total card-small\">{data.recovered}</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"card\">\r\n                    <div className=\"card-main\">\r\n                        <div className=\"card-inner\">\r\n                            <p className=\"card-name\"><span> TOTAL </span> CONFIRMED </p>\r\n                            <p className=\"card-total card-small\">{data.confirmed}</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"card\">\r\n                    <div className=\"card-main\">\r\n                        <div className=\"card-inner\">\r\n                            <p className=\"card-name\"><span> TOTAL </span> DEATH </p>\r\n                            <p className=\"card-total card-small\">{data.deaths}</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"card\">\r\n                    <div className=\"card-main\">\r\n                        <div className=\"card-inner\">\r\n                            <p className=\"card-name\"><span> TOTAL </span> ACTIVE </p>\r\n                            <p className=\"card-total card-small\">{data.active}</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n\r\n                <li className=\"card\">\r\n                    <div className=\"card-main\">\r\n                        <div className=\"card-inner\">\r\n                            <p className=\"card-name\"><span> LAST </span> UPDATED </p>\r\n                            <p className=\"card-total card-small\">{data.lastupdatedtime}</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </section>        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Covid;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Covid from './components/Covid'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Covid />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}